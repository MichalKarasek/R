getwd()
setwd("/R_working_directory")
setwd("home/michal/R_working_directory")
x<-c(1>15)
y<-c(30:45)
plot(x,y)
x<-c(1:15)
plot(x,y)
y
x
y<-c(31:45)
plot(x,y)
help('plot')
plot(sin,-pi,2*pi)
plot(sin,0,2*pi)
require(grDevices) # for colours
x <- -6:16
op <- par(mfrow = c(2, 2))
contour(outer(x, x), method = "edge", vfont = c("sans serif", "plain"))
z <- outer(x, sqrt(abs(x)), FUN = "/")
image(x, x, z)
contour(x, x, z, col = "pink", add = TRUE, method = "edge",
vfont = c("sans serif", "plain"))
contour(x, x, z, ylim = c(1, 6), method = "simple", labcex = 1,
xlab = quote(x[1]), ylab = quote(x[2]))
contour(x, x, z, ylim = c(-6, 6), nlev = 20, lty = 2, method = "simple",
main = "20 levels; \"simple\" labelling method")
par(op)
## Persian Rug Art:
x <- y <- seq(-4*pi, 4*pi, len = 27)
r <- sqrt(outer(x^2, y^2, "+"))
opar <- par(mfrow = c(2, 2), mar = rep(0, 4))
for(f in pi^(0:3))
contour(cos(r^2)*exp(-r/f),
drawlabels = FALSE, axes = FALSE, frame = TRUE)
rx <- range(x <- 10*1:nrow(volcano))
ry <- range(y <- 10*1:ncol(volcano))
ry <- ry + c(-1, 1) * (diff(rx) - diff(ry))/2
tcol <- terrain.colors(12)
par(opar); opar <- par(pty = "s", bg = "lightcyan")
plot(x = 0, y = 0, type = "n", xlim = rx, ylim = ry, xlab = "", ylab = "")
u <- par("usr")
rect(u[1], u[3], u[2], u[4], col = tcol[8], border = "red")
contour(x, y, volcano, col = tcol[2], lty = "solid", add = TRUE,
vfont = c("sans serif", "plain"))
title("A Topographic Map of Maunga Whau", font = 4)
abline(h = 200*0:4, v = 200*0:4, col = "lightgray", lty = 2, lwd = 0.1)
## contourLines produces the same contour lines as contour
plot(x = 0, y = 0, type = "n", xlim = rx, ylim = ry, xlab = "", ylab = "")
u <- par("usr")
rect(u[1], u[3], u[2], u[4], col = tcol[8], border = "red")
contour(x, y, volcano, col = tcol[1], lty = "solid", add = TRUE,
vfont = c("sans serif", "plain"))
line.list <- contourLines(x, y, volcano)
invisible(lapply(line.list, lines, lwd=3, col=adjustcolor(2, .3)))
par(opar)
## Persian Rug Art:
x <- y <- seq(-4*pi, 4*pi, len = 27)
r <- sqrt(outer(x^2, y^2, "+"))
opar <- par(mfrow = c(2, 2), mar = rep(0, 4))
for(f in pi^(0:3))
contour(cos(r^2)*exp(-r/f),
drawlabels = FALSE, axes = FALSE, frame = TRUE)
rx <- range(x <- 10*1:nrow(volcano))
ry <- range(y <- 10*1:ncol(volcano))
ry <- ry + c(-1, 1) * (diff(rx) - diff(ry))/2
tcol <- terrain.colors(12)
par(opar); opar <- par(pty = "s", bg = "lightcyan")
plot(x = 0, y = 0, type = "n", xlim = rx, ylim = ry, xlab = "", ylab = "")
u <- par("usr")
rect(u[1], u[3], u[2], u[4], col = tcol[8], border = "red")
contour(x, y, volcano, col = tcol[2], lty = "solid", add = TRUE,
vfont = c("sans serif", "plain"))
title("A Topographic Map of Maunga Whau", font = 4)
abline(h = 200*0:4, v = 200*0:4, col = "lightgray", lty = 2, lwd = 0.1)
x<-c(2,4,6)
x1<-c(8,10,12)
x2<-c(14,16,18)
matrix(x1)
matrix(x1,ncol = 3)
matrix(x,x1,x2,ncol = 3)
mat<-matrix(c(x,x1),nrow = length(x))
mat
mat<-matrix(c(x,x1),ncol = length(x))
mat
mat<-matrix(c(x,x1),nrow = length(x))
mat
t(mat)
mat<-matrix(c(x,x1,x2),nrow = length(x))
mat
Y<- c(x1(2:end))
Y<- c(x1[2:end])
x1[1]
x1[2:3]
x1[2:end]
x1[2:last]
help(":")
a<-c(1:20)
x<-a[6:length(a)]
x
Speed_1 <- matrix(c(Noam05[3:delka], Noam06[3:delka], Noam17[3:delka], Noam18[3:delka], Noam19[3:delka]), nrow = 5)
source('~/R_working_directory/TG4/U03.R')
Spped_1
source('~/R_working_directory/TG4/U03.R')
print(Speed_1)
source('~/R_working_directory/TG4/U03.R')
Speed_1 <- matrix(c(Noam05[4:delka], Noam06[4:delka], Noam17[4:delka], Noam18[4:delka], Noam19[4:delka]), nrow = 3)
source('~/R_working_directory/TG4/U03.R')
t(Speed_1)
source('~/R_working_directory/TG4/U03.R')
source('~/R_working_directory/TG4/U03.R')
source('~/R_working_directory/TG4/U03.R')
new<- length(2)
new
new<- vector(,2)
new[1]
new[2]
new[1]<- 10
new
new[2]
help("rbind")
m <- cbind(1, 1:7) # the '1' (= shorter vector) is recycled
m
m <- cbind(m, 8:14)[, c(1, 3, 2)] # insert a column
m
cbind(1:7, diag(3)) # vector is subset -> warning
help("rbind")
help("rbind")
a<-matrix(diag(5))
a
a<-matrix(diag(5),nrow = 5)
a
a
a<-matrix(c(a,c(1:5)),nrow = 6)
a
a<-matrix(c(a,t(c(1:5)),nrow = 6)
a
m <- cbind(1, 1:7) # the '1' (= shorter vector) is recycled
m
m <- cbind(m, 8:14)[, c(1, 3, 2)] # insert a column
m
m <- cbind(m, 8:14)[, c(1, 2, 3)]
m
a<- matrix(1:20, nrow = 4)
a
rbind(a,c(1,12,24,48,96))
help("for")
Speed_1
ncol(Speed_1)
source('~/R_working_directory/TG4/U03.R')
source('~/R_working_directory/TG4/U03.R')
for(n in c(2,5,10,20,50)) {
x <- stats::rnorm(n)
cat(n, ": ", sum(x^2), "\n", sep = "")
}
source('~/R_working_directory/TG4/U03.R')
source('~/R_working_directory/TG4/U03.R')
source('~/R_working_directory/TG4/U03.R')
source('~/R_working_directory/TG4/U03.R')
source('~/R_working_directory/TG4/U03.R')
source('~/R_working_directory/TG4/U03.R')
source('~/R_working_directory/TG4/U03.R')
source('~/R_working_directory/TG4/U03.R')
Geographic_coordinates_1
help("vector")
help("atan2")
Coordinate_1
Coordinate_1[1,2]
source('~/R_working_directory/TG4/U03.R')
source('~/R_working_directory/TG4/U03.R')
source('~/R_working_directory/TG4/U03.R')
Geographic_coordinates_1
source('~/R_working_directory/TG4/U03.R')
Geographic_coordinates_1
source('~/R_working_directory/TG4/U03.R')
Geographic_coordinates_1
2.4444*200/pi
Geographic_coordinates_2
0.48*200/pi
source('~/R_working_directory/TG4/U03.R')
Y_rotation
t(Coordinate_1[1,1:3])
Coordinate_1[1,1:3]
a<- Coordinate_1[1,1:3]
t(a)
matrix(Coordinate_1[1,1:3], nrow = 3)
source('~/R_working_directory/TG4/U03.R')
Coordinates_local
Y_rotation
Z_rotation
Y_rotation %*% Z_rotation
matrix(Coordinate_1[5,1:3], nrow = 3)
Y_rotation %*% Z_rotation %*% matrix(Coordinate_1[5,1:3])
source('~/R_working_directory/TG4/U03.R')
source('~/R_working_directory/TG4/U03.R')
Unclouded_coordinates_1
U<- replace(Unclouded_coordinates_1[3,1:nrow(Unclouded_coordinates_1)],0)
U <- Unclouded_coordinates_1[,-3]
U
zeros(5)
matrix(0L, nrow = dim(Unclouded_coordinates_1)[1])
matrix(0, nrow = dim(Unclouded_coordinates_1)[1])
matrix(0, nrow = dim(Unclouded_coordinates_1)[2])
source('~/R_working_directory/TG4/U03.R')
source('~/R_working_directory/TG4/U03.R')
source('~/R_working_directory/TG4/U03.R')
source('~/R_working_directory/TG4/U03.R')
source('~/R_working_directory/TG4/U03.R')
Unclouded_coordinates_1
source('~/R_working_directory/TG4/U03.R')
Unclouded_coordinates_1
Unclouded_coordinates_2
source('~/R_working_directory/TG4/U03.R')
source('~/R_working_directory/TG4/U03.R')
Speed_vector_1
Z_rotation_1 %*% Y_rotation_1
matrix(Unclouded_speed_1[n,1:3], nrow = 3)
source('~/R_working_directory/TG4/U03.R')
Speed_vector_2
Speed_vector_1
Speed_vector_1
dim(A1)
source('~/R_working_directory/TG4/U03.R')
dim(A1)
source('~/R_working_directory/TG4/U03.R')
measure_vector_A1
matrix(Speed_vector_1[n, 1:3], nrow = 3)
help("cbind")
a <- vector(1:15)
a <- vector(mode ="numeric", 1:15)
help("vector")
source('~/R_working_directory/TG4/U03.R')
measure_vector_A1
local_matrix_A1
A1
source('~/R_working_directory/TG4/U03.R')
source('~/R_working_directory/TG4/U03.R')
A1
A2
source('~/R_working_directory/TG4/U03.R')
measure_vector_A1
source('~/R_working_directory/TG4/U03.R')
measure_vector_A1
measure_vector_A2
source('~/R_working_directory/TG4/U03.R')
A
A1
source('~/R_working_directory/TG4/U03.R')
source('~/R_working_directory/TG4/U03.R')
A1
t(A1)
solve(t(A1) %*% A1)
t(A1)*(- measure_vector_A1)
measure_vector_A1
t(A1)
t(A1)*(- measure_vector_A1)
source('~/R_working_directory/TG4/U03.R')
dx_1
source('~/R_working_directory/TG4/U03.R')
help("plot")
source('~/R_working_directory/TG4/U03.R')
dx_1
dx_2
dx_1*180/pi
dx_1*60
(dx_1*180/pi)*3600
source('~/R_working_directory/TG4/U03.R')
Speed_plate_1
source('~/R_working_directory/TG4/U03.R')
Speed_point_plate_1
source('~/R_working_directory/TG4/U03.R')
Speed_point_plate_1
A <- c(1, 2, 3)
B <- c(4, 5, 6)
A *B
prod(A,B)
help("prod")
source('~/R_working_directory/TG4/U03.R')
V_point_1
V_point_2
source('~/R_working_directory/TG4/U03.R')
V_point_1_size
source('~/R_working_directory/Elipsa.R')
source('~/R_working_directory/Elipsa.R')
source('~/R_working_directory/Elipsa.R')
source('~/R_working_directory/Elipsa.R')
source('~/R_working_directory/Elipsa.R')
source('~/R_working_directory/Elipsa.R')
source('~/R_working_directory/Elipsa.R')
source('~/R_working_directory/Elipsa.R')
Elipsa(1000,100)
source('~/R_working_directory/TG4/U03.R')
Distance_Noam15_Afrc02_Diff
Distance_Noam15_Afrc02
source('~/R_working_directory/Rajon.R')
Rajon('Test.txt')
source('~/R_working_directory/Elipsa.R')
Elipsa(40,10,0)
Elipsa(40,10,20)
Elipsa(40,10,167)
source('~/R_working_directory/Elipsa.R')
Elipsa(400000,10)
source('~/R_working_directory/Elipsa.R')
source('~/R_working_directory/Elipsa.R')
Elipsa(400000,10)
source('~/R_working_directory/Elipsa.R')
Elipsa(400000,10)
Elipsa(400,10)
Elipsa(4000,10)
Elipsa(40000,10)
Elipsa(400000,10)
Elipsa(40000000,10)
Elipsa(40000000000000000,10)
Elipsa(4000,10)
source('~/R_working_directory/Elipsa.R')
Elipsa(4000,10)
Elipsa(400,10)
Elipsa(4000,10)
Elipsa(40000,10)
Elipsa(100,1)
source('~/R_working_directory/Elipsa.R')
Elipsa(100,1)
Elipsa(250,1)
Elipsa(125,1)
Elipsa(100,1)
Elipsa(90,1)
Elipsa(180,2)
Elipsa(270,3)
Elipsa(3000,30)
Elipsa(3000,3)
Elipsa(3000,30)
source('~/R_working_directory/Elipsa.R')
Elipsa(100, 30, 50000, 10000, 100)
source('~/R_working_directory/Elipsa.R')
Elipsa(100, 30, 50000, 10000, 100)
source('~/R_working_directory/Elipsa.R')
Elipsa(100, 30, 50000, 10000, 100)
vec_local
source('~/R_working_directory/Elipsa.R')
Elipsa(100, 30, 50000, 10000, 100)
source('~/R_working_directory/Elipsa.R')
Elipsa(100, 30, 50000, 10000, 100)
Elipsa(100, 30, 50000, 10000, 90)
Elipsa(100, 30, 50000, 10000, 125)
Elipsa(100, 30, 50000, 10000, 0)
source('~/R_working_directory/Elipsa.R')
Elipsa(100, 30, 50000, 10000, 0)
Elipsa(100, 30, 50000, 10000, 10)
Elipsa(100, 30, 50000, 10000, 40)
Elipsa(100, 30, 50000, 10000, 90)
Elipsa(100, 30, 50000, 10000, 110)
Elipsa(100, 30, 50000, 10000, 130)
Elipsa(100, 30, 50000, 10000, 180)
Elipsa(100, 30, 50000, 10000, 250)
Elipsa(100, 30, 50000, 10000, 0)
Elipsa(100, 30, 50000, 10000, 10)
Elipsa(100, 30, 50000, 10000, 0)
source('~/R_working_directory/Elipsa.R')
Elipsa(100, 30, 50000, 10000, 0)
Elipsa(100, 30, 50000, 10000, 10)
10*pi/180
source('~/R_working_directory/Elipsa.R')
source('~/R_working_directory/Elipsa.R')
Elipsa(100, 30, 50000, 10000, 10)
Elipsa(100, 30, 50000, 10000, 0)
source('~/R_working_directory/Elipsa.R')
Elipsa(100, 30, 50000, 10000, 0)
Elipsa(100, 30, 50000, 10000, 10)
Elipsa(100, 30, 50000, 10000, 0)
Elipsa(100, 30, 50000, 10000, 40)
source('~/R_working_directory/Elipsa.R')
Elipsa(100, 30, 50000, 10000, 40)
Elipsa(100, 30, 50000, 10000, 90)
source('~/R_working_directory/Elipsa.R')
source('~/R_working_directory/Elipsa.R')
Elipsa(100, 30, 50000, 10000, 90)
Elipsa(100, 30, 50000, 10000, 0)
Elipsa(100, 30, 50000, 10000, 10)
Elipsa(100, 30, 50000, 10000, 34.754)
source('~/R_working_directory/Elipsa.R')
Elipsa(100, 30, 50000, 10000, 34.754)
source('~/R_working_directory/Elipsa.R')
Elipsa(100, 30, 50000, 10000, 34.754)
Elipsa(100, 30, 50000, 10000, 34.754)
source('~/R_working_directory/Elipsa.R')
Elipsa(100, 30, 50000, 10000, 34.754)
source('~/R_working_directory/Elipsa.R')
Elipsa(100, 30, 50000, 10000, 34.754)
source('~/R_working_directory/Elipsa.R')
Elipsa(100, 30, 50000, 10000, 34.754)
source('~/R_working_directory/Elipsa.R')
Elipsa(100, 30, 50000, 10000, 34.754)
source('~/R_working_directory/Elipsa.R')
Elipsa(100, 30, 50000, 10000, 34.754)
help('points()')
help('points')
source('~/R_working_directory/Elipsa.R')
Elipsa(100, 30, 50000, 10000, 34.754)
## Line types
showLty <- function(ltys, xoff = 0, ...) {
stopifnot((n <- length(ltys)) >= 1)
op <- par(mar = rep(.5,4)); on.exit(par(op))
plot(0:1, 0:1, type = "n", axes = FALSE, ann = FALSE)
y <- (n:1)/(n+1)
clty <- as.character(ltys)
mytext <- function(x, y, txt)
text(x, y, txt, adj = c(0, -.3), cex = 0.8, ...)
abline(h = y, lty = ltys, ...); mytext(xoff, y, clty)
y <- y - 1/(3*(n+1))
abline(h = y, lty = ltys, lwd = 2, ...)
mytext(1/8+xoff, y, paste(clty," lwd = 2"))
}
showLty(c("solid", "dashed", "dotted", "dotdash", "longdash", "twodash"))
par(new = TRUE)  # the same:
showLty(c("solid", "44", "13", "1343", "73", "2262"), xoff = .2, col = 2)
showLty(c("11", "22", "33", "44",   "12", "13", "14",   "21", "31"))
source('~/R_working_directory/Elipsa.R')
Elipsa(100, 30, 50000, 10000, 34.754)
help('plot')
source('~/R_working_directory/Elipsa.R')
Elipsa(100, 30, 50000, 10000, 34.754)
source('~/R_working_directory/Elipsa.R')
Elipsa(100, 30, 50000, 10000, 34.754)
source('~/R_working_directory/Elipsa.R')
Elipsa(100, 30, 50000, 10000, 34.754)
source('~/R_working_directory/Elipsa.R')
Elipsa(100, 30, 50000, 10000, 34.754)
source('~/R_working_directory/Elipsa.R')
Elipsa(100, 30, 50000, 10000, 34.754)
Elipsa(100, 30, 50000, 10000)
source('~/R_working_directory/Elipsa.R')
Elipsa(100, 30, 50000, 10000)
title(main="My Title", col.main="red",
sub="My Sub-title", col.sub="blue",
xlab="My X label", ylab="My Y label",
col.lab="green", cex.lab=0.75)
title(main="My Title", col.main="red",
sub="My Sub-title", col.sub="blue",
xlab="My X label", ylab="My Y label",
col.lab="green", cex.lab=0.75)
plot()
source('~/R_working_directory/Elipsa.R')
Elipsa(100, 30, 50000, 10000)
source('~/R_working_directory/Elipsa.R')
source('~/R_working_directory/Elipsa.R')
Elipsa(100, 3000, 50000, 10000)
Elipsa(100, 30, -50000, 10000, 10)
source('~/R_working_directory/Elipsa.R')
Elipsa(100, 30, -50000, 10000, 10)
source('~/R_working_directory/Elipsa.R')
Elipsa(100, 30, -50000, 10000, 10)
Elipsa(100, 30, -50000, 10000, 10)
source('~/R_working_directory/Elipsa.R')
source('~/R_working_directory/Elipsa.R')
Elipsa(100, 30, -50000, 10000, 10)
source('~/R_working_directory/Elipsa.R')
Elipsa(100, 30, -50000, 10000, 10)
source('~/R_working_directory/Elipsa.R')
source('~/R_working_directory/Elipsa.R')
Elipsa(100, 30, -50000, 10000, 10)
source('~/R_working_directory/TG4/U03.R')
source('~/R_working_directory/TG4/U03.R')
Geographic_coordinates_1
Geographic_coordinates_2
Unclouded_speed_1
Unclouded_speed_2
Speed_vector_1
source('~/R_working_directory/TG4/U03.R')
Speed_local_1 <- matrix(Z_rotation_1 %*% Y_rotation_1 %*% matrix(Unclouded_speed_1[n,1:3], nrow = 3), ncol = 3)
Speed_vector_1
Unclouded_speed_1
source('~/R_working_directory/TG4/U03.R')
source('~/R_working_directory/TG4/U03.R')
Speed_local_1 <- matrix(Z_rotation_1 %*% Y_rotation_1 %*% matrix(Unclouded_speed_1[n,1:3], nrow = 3), ncol = 3)
Speed_vector_1
A1
A2
V_point_1
V_point_2
Distance_Noam15_Afrc02
Alfa_1
Alfa_2
Diff_1
Diff_2
Diff_1-Diff_2
-Diff_1+Diff_2
source('~/R_working_directory/TG4/U03.R')
Distance_Noam15_Afrc02_Diff <- Distance_Noam15_Afrc02 - Diff_1 + Diff_2
Speed_plate_1
Speed_plate_2
source('~/R_working_directory/TG4/U03.R')
dx_1 <- solve(t(A1) %*% A1) %*% t(A1) %*% ( measure_vector_A1)
Speed_plate_1
Speed_plate_2
Diff_1
Diff_2
Diff_1-Diff_2
getwd()
setwd("GEOMASS/")
library("GEOMASS")
help("length_intersection")
help("Length_intersection")
help("length_intersection_calculation")
help("Length_intersection")
File <- system.file("extdata", "Length_intersection.txt", package = "GEOMASS")
Results <- Length_intersection(File, TRUE)
library(GEOMASS)
File <- system.file("extdata", "Length_intersection.txt", package = "GEOMASS")
Results <- Length_intersection(File, TRUE)
library(GEOMASS)
File <- system.file("extdata", "Length_intersection.txt", package = "GEOMASS")
Results <- Length_intersection(File, TRUE)
